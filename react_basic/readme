"{"name":"Tom","age":"19"}"

json中，    parse：解析成为js中的对象
            stringfy：把js对象 解析成字符串

<!-- jsx语法规则
    1、定义虚拟DOM的时候，不要写引号
    2、标签中混入jsb表达需要有{}
    3、样式的类名指定不要用class，要用className
    4、内联样式，要用style={{key:value}}的形式去写
    5、虚拟DOM，只有一个根标签
    6、标签必须闭合
    7、标签首字母，
        1/若是小写字母开头，则将标签改为html中同名元素，若无该标签的同名元素，则报错。
        2/若是大写字母开头，react就去渲染对应的组件，若主键没有定义，则报错
-->

<!-- 1、区分js语句和js表达式
    表达式：一个表达式产生一个值，可以放在任何一个需要值的地方，以下都是表达式
        1、a 2. a+b 3.demo(1)【函数调用表达式】4、arr.map()【加工数组】5、function test() {}
        
    语句或者代码
        1.if(){} 2.for(){} 3.switch(){case:XXX}
 -->

 

 模块，组件，模块化，组件化
 模块：提供特定功能的js文件，复用js，简化js编写，提高运行效率

组件：用来实现局部功能效果的代码和资源的集合（比如实现头部区域的结果，样式，图片，音视频整个打包带走），使得组件得以复用

模块化：应用的都是由js来编写的

组件化（工程化）：多个组件的方式实现，应用就是一个组件化的应用。

给谷歌浏览器安装react developer tools工具


类中的构造器不是必须写的
1.要对实例进行一些初始化的操作，要添加指定属性时才写，‘
2.如果A类继承了B类，且A类中有构造器，那么A类构造器中的super是必须要调用的
3.类中定义的方法都是放在了原型对象上。

类式组件
<script type="text/babel">
    // 1.创建类式组件
    class MyComponent extends React.Component{
        render(){
            // 类式组件必须要有render
            // render放在哪里的-类(MyComponent)的原型对象上，供实例使用
            // render中的this是谁-MyComponent的实例对象,MyComponent组件的实例对象
            console.log('render的this实例对象',this)
            return <h2>我是类定义的组件（适用于【复杂组件】的定义）</h2>
        }
    }
    // 2、渲染组件到页面
    ReactDOM.render(<MyComponent/>,document.getElementById('test'))
    // 1/react解析组件标签，找到MyComponent组件。
    // 2、发现组件使用的类定义，随后new出来该类的实例，并且通过该实例调用到render方法
    // 3、将render返回的虚拟DOM转化为真实DOM，呈现在页面中
</script>


组件实例的三大核心属性之一：state
状态
state是一个对象{},组将被称为状态机，维护状态，通过更新组件状态来更新对应页面显示（重新渲染组件）
1）组件中render方法的this为组件实例对象
2）组件自定义方法中this为undefine,如何解决
a.强制绑定this通过函数对象的bind()
b.箭头函数
3.状态数据不能直接修改，必须通过setState

constructor的使用范围
1、通过给this.state赋值对象类初始化内部state
2、为函数事件处理绑定实例（bind）

<!-- 可传可不传的情况下,要使用this就需要传，不然会被认为undefine -->
<!-- 希不希望在构造器中通过this访问props -->
<!-- 一般不写 -->
constructor(props){
    super(props)
    console.log('constructor',this.props)
}


<!-- 回调函数，回调回调别人在调 -->
1.你没调用
2.你定义的函数
3.函数之后执行了
()=>{}匿名函数

(a)=>{console.log(a)}

如何理解下面
ref={(a)=>{this.input1 = a}}
(a),：当前所处的节点
this.input = a,把a放在组件实例自身上，然后取了名字叫input1
这里的this是谁呢，这里是箭头函数，没有自己的this,往外找，找谁呢,就是render，就是组件的实例对象


什么叫内联函数
标签里面的函数，

ref回调使用问题，在更新过程中，会被执行两次，第一是null，第二次才是需要的
参考案例
03_ref回调次数的问题



什么叫非受控组件
现用现取,例如用户名密码，

状态组件
输入类，改变存放在状态里面，需要的时候就去取


高阶函数：
1.A函数接收的参数是一个函数，A就可以成为高阶函数
2.A掉用的返回值是函数。，A是高阶函数
常见的高阶函数
Promise，数组上常见的方法
函数柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式



组件的生命周期！！非常重要

clearInterval() 方法可以取消该周期性的方法调用

componentDidmount和componentWIllUnmout


shouldComponentUpdate，应不应该更新状态，true更新，相当于阀门的开放关闭，默认为真,每次更新的时候会问它


forceUpdate()强制更新，就是不用走阀门，，不走shouldComponentUpdate这个路径

父组件，子组件

class A extends React.Component{
    render(){
        return(
            <div>
                <B/>
            </div>
        )
    }
}

class B extends React.Component{
    ......
}

componentDidMount()常用，用于初始化，开启定时器，发送网络请求，订阅消息
componentWillUnmount()，常用于收尾工作，关闭定时器，取消订阅消息


cdn下载信息
https://www.bootcdn.cn/

diffing算法，最小是标签，会一直遍历


经典面试题

1.react/vue中key有什么作用（key内部原理）
2，为什么遍历列表时，key最好不要用index
虚拟DOM中key的作用
1)简单说：key是虚拟对象的标识，在更新显示时key起重要作用
2）详细说
    1、状态发生变化时，react会根据【新数据】生成【新的虚拟DOM】,随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较
        a、旧虚拟DOM找到了与新虚拟DOM相同的key:1.虚拟DOM中内容没变，直接用之前的正式DON，2虚拟DOM中内容变了，则新新的真实DOM替换之前真实的
        b.旧虚拟DOM中未找到，新虚拟DOM中相同的key,根据数据创建新的真实DOM，渲染到页面

    2、用index作为key可能引发的问题
        a.若对数据进行：！！！！逆序添加，逆序删除等破坏顺序操作，
            会产生没有必要的真实DOM更新==>界面效果没有问题，但效率低
        b.如果结构中还包含输入类DOM,
            会产生错误DOM更新 ==》界面问题
        c.注意，如果不存在a,只用作渲染展示，则使用index作为key只是效率问题

    3.开发中如何选择key，
        1.最好使用每条数据的唯一标识作为key,比如id，手机号，身份正，学号等唯一值
        2.如果确定只是简单展示数据，用index展示也可以