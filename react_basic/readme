"{"name":"Tom","age":"19"}"

json中，    parse：解析成为js中的对象
            stringfy：把js对象 解析成字符串

<!-- jsx语法规则
    1、定义虚拟DOM的时候，不要写引号
    2、标签中混入jsb表达需要有{}
    3、样式的类名指定不要用class，要用className
    4、内联样式，要用style={{key:value}}的形式去写
    5、虚拟DOM，只有一个根标签
    6、标签必须闭合
    7、标签首字母，
        1/若是小写字母开头，则将标签改为html中同名元素，若无该标签的同名元素，则报错。
        2/若是大写字母开头，react就去渲染对应的组件，若主键没有定义，则报错
-->

<!-- 1、区分js语句和js表达式
    表达式：一个表达式产生一个值，可以放在任何一个需要值的地方，以下都是表达式
        1、a 2. a+b 3.demo(1)【函数调用表达式】4、arr.map()【加工数组】5、function test() {}
        
    语句或者代码
        1.if(){} 2.for(){} 3.switch(){case:XXX}
 -->

 

 模块，组件，模块化，组件化
 模块：提供特定功能的js文件，复用js，简化js编写，提高运行效率

组件：用来实现局部功能效果的代码和资源的集合（比如实现头部区域的结果，样式，图片，音视频整个打包带走），使得组件得以复用

模块化：应用的都是由js来编写的

组件化（工程化）：多个组件的方式实现，应用就是一个组件化的应用。

给谷歌浏览器安装react developer tools工具


类中的构造器不是必须写的
1.要对实例进行一些初始化的操作，要添加指定属性时才写，‘
2.如果A类继承了B类，且A类中有构造器，那么A类构造器中的super是必须要调用的
3.类中定义的方法都是放在了原型对象上。

类式组件
<script type="text/babel">
    // 1.创建类式组件
    class MyComponent extends React.Component{
        render(){
            // 类式组件必须要有render
            // render放在哪里的-类(MyComponent)的原型对象上，供实例使用
            // render中的this是谁-MyComponent的实例对象,MyComponent组件的实例对象
            console.log('render的this实例对象',this)
            return <h2>我是类定义的组件（适用于【复杂组件】的定义）</h2>
        }
    }
    // 2、渲染组件到页面
    ReactDOM.render(<MyComponent/>,document.getElementById('test'))
    // 1/react解析组件标签，找到MyComponent组件。
    // 2、发现组件使用的类定义，随后new出来该类的实例，并且通过该实例调用到render方法
    // 3、将render返回的虚拟DOM转化为真实DOM，呈现在页面中
</script>


组件实例的三大核心属性之一：state
状态
state是一个对象{},组将被称为状态机，维护状态，通过更新组件状态来更新对应页面显示（重新渲染组件）
1）组件中render方法的this为组件实例对象
2）组件自定义方法中this为undefine,如何解决
a.强制绑定this通过函数对象的bind()
b.箭头函数
3.状态数据不能直接修改，必须通过setState

constructor的使用范围
1、通过给this.state赋值对象类初始化内部state
2、为函数事件处理绑定实例（bind）

<!-- 可传可不传的情况下,要使用this就需要传，不然会被认为undefine -->
<!-- 希不希望在构造器中通过this访问props -->
<!-- 一般不写 -->
constructor(props){
    super(props)
    console.log('constructor',this.props)
}